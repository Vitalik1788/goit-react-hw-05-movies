{"version":3,"file":"static/js/705.c9995fa7.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styles.jsx","components/MoviesList/MoviesList.jsx","fetch/FetchApi.jsx","pages/MoviesSearch.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const MovieList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 10px;\n`\n\nexport const MovieItem = styled.li`\n  max-width: min-content;\n  text-align: center;\n\n`\n\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieList, MovieItem } from './MoviesList.styles';\n\nconst MoviesList = ({ movies, location, foundMovies, movieSearchLocation }) => {\n  return (\n    <>\n      {movies && (\n        <MovieList>\n          {movies.map(movie => {\n            return (\n              <MovieItem key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  <img\n                    src={\n                      movie.poster_path\n                        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                        : 'https://i.pinimg.com/originals/a0/57/48/a05748c84d7093e382c560bbc57665ce.jpg'\n                    }\n                    alt={`${movie.title && movie.original_title}`}\n                    width={200}\n                  />\n                  <p>{movie.title && movie.original_title}</p>\n                </Link>\n              </MovieItem>\n            );\n          })}\n        </MovieList>\n      )}\n      {foundMovies && (\n        <MovieList>\n          {foundMovies.map(movie => {\n            return (\n              <MovieItem key={movie.id}>\n                <Link to={`${movie.id}`} state={{ from: movieSearchLocation }}>\n                  <img\n                    src={\n                      movie.poster_path !== null\n                        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                        : 'https://i.pinimg.com/originals/a0/57/48/a05748c84d7093e382c560bbc57665ce.jpg'\n                    }\n                    alt={`${movie.title && movie.original_title}`}\n                    width={200}\n                    height={300}\n                  />\n                  <p>{movie.title && movie.original_title}</p>\n                </Link>\n              </MovieItem>\n            );\n          })}\n        </MovieList>\n      )}\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ),\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  foundMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ),\n  movieSearchLocation: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n};\n\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nconst API_KEY = '41b8f9437bf3f899281f8a3f9bdc0891';\n\nconst fetchTrandingMovies = async () => {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nconst fetchMoviesDetails = async moviesId => {\n  const response = await axios.get(\n    `/3/movie/${moviesId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchCast = async moviesId => {\n  const response = await axios.get(\n    `3/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchMovieReview = async moviesId => {\n  const response = await axios.get(\n    `3/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nconst fetchSearchMovie = async query => {\n  const response = await axios.get(\n    `3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport {\n  fetchTrandingMovies,\n  fetchMoviesDetails,\n  fetchCast,\n  fetchMovieReview,\n  fetchSearchMovie,\n};\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport { fetchSearchMovie } from 'fetch/FetchApi';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nconst MoviesSearchForm = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [error, setError] = useState('');\n  const searchQuery = searchParams.get('query') ?? '';\n  const movieSearchLocation = useLocation();\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    const userMoviesList = async e => {\n      try {\n        const data = await fetchSearchMovie(searchQuery);\n        setFoundMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    userMoviesList();\n  }, [searchQuery]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim() === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: inputValue.toLowerCase() });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          value={inputValue}\n          placeholder=\"Enter movie name\"\n          onChange={e => setInputValue(e.currentTarget.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {error && <h3>{error}</h3>}\n      {\n        foundMovies && (\n          <MoviesList\n            foundMovies={foundMovies}\n            movieSearchLocation={movieSearchLocation}\n          />\n        )\n\n        // <ul>\n        //   {foundMovies.map(movie => {\n        //     return (\n        //       <li key={movie.id}>\n        //         <Link to={`${movie.id}`} state={{ from: location }}>\n        //           <img\n        //             src={\n        //               movie.poster_path !== null\n        //                 ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        //                 : 'https://i.pinimg.com/originals/a0/57/48/a05748c84d7093e382c560bbc57665ce.jpg'\n        //             }\n        //             alt={`${movie.title && movie.original_title}`}\n        //             width={200}\n        //           />\n        //           <p>{movie.title && movie.original_title}</p>\n        //         </Link>\n        //       </li>\n        //     );\n        //   })}\n        // </ul>\n      }\n    </>\n  );\n};\n\nexport default MoviesSearchForm;\n"],"names":["MovieList","styled","MovieItem","movies","location","foundMovies","movieSearchLocation","map","movie","to","id","state","from","src","poster_path","alt","title","original_title","width","height","axios","API_KEY","fetchTrandingMovies","response","data","fetchMoviesDetails","moviesId","fetchCast","fetchMovieReview","fetchSearchMovie","query","useSearchParams","searchParams","setSearchParams","useState","setFoundMovies","inputValue","setInputValue","error","setError","searchQuery","get","useLocation","useEffect","userMoviesList","e","results","message","onSubmit","preventDefault","trim","toLowerCase","type","autoComplete","autoFocus","value","placeholder","onChange","currentTarget"],"sourceRoot":""}