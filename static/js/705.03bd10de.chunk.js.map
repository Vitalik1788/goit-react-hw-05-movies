{"version":3,"file":"static/js/705.03bd10de.chunk.js","mappings":"kTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,6BAEzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACVF,EAAAA,EAAAA,IAAA,wCAA2CC,IADjC,cAC3BE,EAD2B,yBAE1BA,EAASC,MAFiB,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTN,EAAAA,EAAAA,IAAA,mBACTM,EADS,oBACWL,EADX,oBADS,cAC1BE,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBG,EAAS,mCAAG,WAAMD,GAAN,uFACAN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACkBL,EADlB,oBADA,cACjBE,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTI,EAAgB,mCAAG,WAAMF,GAAN,uFACPN,EAAAA,EAAAA,IAAA,kBACVM,EADU,4BACkBL,EADlB,2BADO,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBK,EAAgB,mCAAG,WAAMC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,iCACKC,EADL,kBACsBS,EADtB,+CADO,cACxBP,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qD,0HCgC7B,UA5DyB,WAAO,IAAD,EAC7B,GAAwCO,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,YAA1B,eAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAW,UAAGP,EAAaQ,IAAI,gBAApB,QAAgC,GAC3CC,GAAWC,EAAAA,EAAAA,MAUXC,EAAY,mCAAG,WAAMC,GAAN,0EACnBA,EAAEC,iBACyB,KAAvBN,EAAYO,OAFG,2EAMEjB,EAAAA,EAAAA,IAAiBU,GANnB,OAMXf,EANW,OAOjBY,EAAeZ,EAAKuB,SAPH,kDASjBT,EAAS,KAAMU,SATE,0DAAH,sDAelB,OAFAC,QAAQC,IAAIT,IAGV,iCACE,kBAAMU,SAAUR,EAAhB,WACE,kBACES,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,MAAOhB,EACPiB,YAAY,mBACZC,SAhCkB,SAAAb,GACxB,IAAMc,EAAad,EAAEe,cAAcJ,MACnC,GAA0B,KAAtBG,EAAWZ,OACb,OAAOb,EAAgB,CAAC,GAE1BA,EAAgB,CAAEH,MAAO4B,EAAWE,eACrC,KA4BK,mBAAQR,KAAK,SAAb,uBAEDf,IAAS,wBAAKA,IACdF,IACC,wBACGA,EAAY0B,KAAI,SAAAC,GACf,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAACC,KAAMzB,GAAvC,SAAmDqB,EAAMK,SADlDL,EAAME,GAIlB,QAKV,C","sources":["fetch/FetchApi.jsx","pages/MoviesSearch.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nconst API_KEY = '41b8f9437bf3f899281f8a3f9bdc0891';\n\nexport const fetchTrandingMovies = async () => {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMoviesDetails = async moviesId => {\n  const response = await axios.get(\n    `/3/movie/${moviesId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async moviesId => {\n  const response = await axios.get(\n    `3/movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReview = async moviesId => {\n  const response = await axios.get(\n    `3/movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(\n    `3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return response.data;\n}\n","import { fetchSearchMovie } from 'fetch/FetchApi';\nimport { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst MoviesSearchForm = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [error, setError] = useState();\n\n  const searchQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const updateQueryString = e => {\n    const queryValue = e.currentTarget.value;\n    if (queryValue.trim() === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: queryValue.toLowerCase() });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (searchQuery.trim() === '') {\n      return;\n    }\n    try {\n      const data = await fetchSearchMovie(searchQuery);\n      setFoundMovies(data.results);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  console.log(location);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          value={searchQuery}\n          placeholder=\"Enter movie name\"\n          onChange={updateQueryString}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {error && <h3>{error}</h3>}\n      {foundMovies && (\n        <ul>\n          {foundMovies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`${movie.id}`} state={{from: location}}>{movie.title}</Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default MoviesSearchForm;\n"],"names":["axios","API_KEY","fetchTrandingMovies","response","data","fetchMoviesDetails","moviesId","fetchCast","fetchMovieReview","fetchSearchMovie","query","useSearchParams","searchParams","setSearchParams","useState","foundMovies","setFoundMovies","error","setError","searchQuery","get","location","useLocation","handleSubmit","e","preventDefault","trim","results","message","console","log","onSubmit","type","autoComplete","autoFocus","value","placeholder","onChange","queryValue","currentTarget","toLowerCase","map","movie","to","id","state","from","title"],"sourceRoot":""}